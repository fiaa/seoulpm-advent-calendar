Title:    Excel 작업 자동화
Package:  Seoul.pm
Category: perl
Category: Seoul.pm
Author:   corpus007

저자
-----

[@corpus007][twitter-corpus007] - I like:
Perl, Unix, History, Chocolate, Yiquan, Kimchi stew, Bread, Science Fiction, Korea Girl Group ^__^,
[홈페이지][home-corpus007]



배경
 
본의 아니게 어떤( ?) 시스템의 1년치 로그(log) 파일을 받아서  분석해야 되는 일이 있었습니다.  
 
월 단위로 전체 로그를 나눈 다음,  관심가는 특정 데이터 값만 뽑아서 이를 그래프로 바꿔서 보면 어떤 경향을 파악할 수 있으리라는 아이디어까지는 떠올랐는데, 
 
이 작업을 수작업으로 한다는 것은 사람이 할 짓은 아니라는 깨달음도 같이 얻어서, 해당 작업을 스크립트로 처리하고자 하였고,
 
매 월별 데이터 셋과 이에 대한 차트 그래프를 워크 시트에 담은 엑셀 파일을 만든다면, 리포트 자료까지 만들어지는 셈이라  결국 Perl을 이용한 Excel 처리를 하게 되었습니다.
 
 
 
본 글은 차후 Perl을 이용한  Excel 문서 작업을 시도해 보려는 이들을 위한 첫걸음에 도움이 되게 하기 위함입니다.
 
모듈 다운 받기
 
MyShell$ cpanm  Excel::Writer::XLSX
Excel::Writer::XLSX 모듈을 다운 받아  인스톨합니다. 
 
모듈의 이름을 보시면 아시겠지만 구 Excel 파일확장자인 '.xls'가 아닌 '.xlsx' 이죠? 이건 그만큼 advanced된 엑셀 기능들을 쓸 수 있다는 얘기입니다.
 
펄 모듈의 다운과 설치 등은 다른 펄크리스마스 기사 등을 참조하세요
 
가볍게 시작하기
 
엑셀처리 하는 내용에만 집중하기 위해, 예제 데이터는 코드 상에서 넣어놨습니다.
 
그리고, 오타나 에러 처리를 수월케 하기 위해 strict/warnings 을 사용합니다.
 
보시면, 아시겠지만  특정 시간 대에 관측된 특정 데이터의 값들만 따로 뽑아서 각각 time list와 value list에 담아 둔 것입니다.
 
#!/usr/bin/env perl
use strict;
use warnings;
use Excel::Writer::XLSX;
 
#sample data
my @time_l = qw(00:22:07 00:22:57 00:23:22 00:24:07 01:22:17 01:24:07 02:22:22 02:22:57 02:23:32
          02:24:07 03:22:32 03:22:57 03:23:42 03:24:07 04:22:37  04:22:57 04:23:47 04:24:07 05:22:42);
      
my @val_l = qw(53 46 54 48 54 45 54 71 66 45 56 72 66 46 54 71 66 47 55);
                   
my $val_size =  @val_l;
 
 
엑셀 파일부터 만들자
 
'report.xlsx'라는 엑셀파일을 만듭니다. 
 
해당 모듈에서는 다루고 있는 엑셀 전체를  workbook이라는 객체에 담아서 처리합니다. 
 
아마, Excel에 친숙한 이들은 더욱  친근( ?)하게 느껴질 것입니다.
 
my $fname = "report.xlsx";
#Create new xlsx file(workbook) with $fname
my $workbook = Excel::Writer::XLSX->new($fname);
die "You got a problem to create new excel file: $!" unless defined $workbook;
전체 스크립트의 수행이 끝나면  "report.xlsx"라는 파일이 만들어집니다(물론, 내용은 아무것도 없지요)
 
하지만, 안전한 종료를 위해서 최종 라인에서는 $workbook->close()를 수행해 주는 것을 권장합니다.
 
 
 
워크 시트에 데이터 집어 넣기
 
"Example"이라는 이름으로 worksheet를 하나 만들고, 그 안에는 미리 준비해 둔 time/value 관련 데이터에 대한 테이블을 기록합니다. 
 
만일, 이름을 생략하면 예상되듯이 Sheet1 .. 식으로 worksheet가 만들어집니다.
 
테이블 헤더 문자열은 bold 처리해보고, 엑셀의 A1 위치에서 부터 시작하게 해보죠
 
#Add worksheet
my $sheet_name = "Example";
my $worksheet = $workbook->add_worksheet($sheet_name);
 
#Write data table on the worksheet
# -- Set head title for table
my $headings = ['Time', 'Load' ];
# -- Changed text format to bold type
my $bold = $workbook->add_format( bold => 1 );
 
# -- Write table into the Worksheet
# -- example is  $worksheet->write( $row, $col, $data, $format );
my $data = [
    [ @time_l],
    [ @val_l],
    ];
 
$worksheet->write('A1', $headings, $bold);
$worksheet->write('A2', $data);
 
기본적으로, $worksheet->write() 메소드를 이용하여 특정 셀에 원하는 값들을 넣을 수 있습니다. 
 
Time 값과 Load 값들을 삽입할 것이고,  각 데이터열의 head title로 "Time"과 "Load" 를 삼습니다.
 
기본적으로, $worksheet->write() 메소드에서의 데이터는 스클라(scalar) 데이터를 가정하기 때문에, 배열이나 테이블을 다루기 위해서는 reference를 만들어서 넣어둡니다.
 
time list/value list를  한 큐( !)에 쓰려고,  $data 변수에  LoL 구조(List of List)를 만들어서 넣었습니다. 
 
물론, 두 줄짜리 테이블 뿐 만 아니라, 여러 컬럼을 가진 테이블도 당연히 처리 가능합니다.
 
펄에서의 데이터 구조 핸들링이나 레퍼런스 처리에 대한 이해가 부족하신 분들은 그냥 외워서 쓰시거나, 아니면 개별 셀을 핸들링해서 처리할 수도 있습니다
 
write() 메소드에 들어가는 파라메터 'A1', 'A2' 등은 짐작하다시피, 값이 쓰여질 셀의 위치를 나타냅니다. 
 
 
 
팁) write_row() 와 write_col() 메소드도 있으니  필요에 따라 적당히 사용하세요 
 
 
여기까지의 화면은 아래와 같습니다.
 


 
 
 
여기서 팁 하나, 만일 엑셀 함수 식을  사용하고자 한다면 아래처럼 하면 됩니다.
 
$worksheet->write('D10', '=sum(D2:D9)');
 
 
이제는 차트를 추가해 보자
 
worksheet에 chart를 넣는 메소드는 add_chart() 입니다.  변수로는 chart의 타입(종류)와 문서 내에 embedding 여부에 대한 플래그입니다.
 
지원되는 차트의 종류로는 'area, bar, column, line, pie, scatter, stock' 등이 있고, 개별 타입에 대한 subtype 이 있습니다.
 
이때, embedded 변수는 옵션이라 생략 가능하다고 하지만 생략하면 warring을 내놓기에 쓰도록 합시다 (warring 싫어~)
 
 
 
add_chart() 메소드의 리턴 값으로 chart 객체가 할당되고 나면,   chart 객체 내에 실제 값들의 계열(series)을 추가해야 합니다.
 
이때 사용하는 메소는 chart 객체 내의 add_series() 메소드입니다..
 
파라메터로는  series에 대한 주석설명을 나타내는 'name' 변수,  'category(범주)', 그리고 실제의 값들에 해당하는 'values' 입니다.
 
만일, 이름을 생략하면 default로 'Chart1' .. 식으로 붙게 됩니다.
 
 
 
만일, 여러개의 series를 추가하고자 한다면, add_series()를 여러번 호출하면 됩니다.
 
#Write chart
# -- Create a new chart object as embedded type.
#my $chart = $workbook->add_chart( type => 'line' );
my $chart = $workbook->add_chart( type => 'line', embedded => 1 );
 
 
# Set series name
#my $series_name = '=' . $sheet_name . '!$B$1';
my $series_name =  'Stress score';
# -- ranges: [ $sheetname, $row_start, $row_end, $col_start, $col_end ].
$chart->add_series(
        name => $series_name,
        categories => [$sheet_name, 1, $val_size+1, 0, 0],
        values     => [$sheet_name, 1, $val_size+1, 1, 1],
        );
 
add_series() 메소드 내에서 category와 values 에 들어가야 하는 값으로는 Sheet name과  참조해야 하는 값들의  시작과 끝의 위치입니다(row_start, row_end, col_start, col_end).
 
이때, 참조하는 위치는 실제 엑셀에서의 데이터가 들어있는 곳의 위치입니다 (저는 개인적으로 이 부분을 이해하는 것이 제일 힘들었습니다).
 
 A1 셀의 위치는 (0,0)이고, B2  셀의 위치는 (1,1)입니다.  이제 여러분이 이 부분에 대해 알 건 다 끝났습니다. 
 
chart의 사이즈, 시작 위치, 타이틀 스트링, x축/y축에 대한 help string 정도 설정한 다음에, insert_chart() 메소드를 써서 실제 시트에 삽입합니다.
 
insert_chart() 는 worksheet에 대해 다루기 때문에 당연히( ?)  worksheet 객체에 소속된 메소드입니다.
 
$chart->set_title( name => 'Line Chart' );
$chart->set_x_axis( name => 'Captured Time' ); 
$chart->set_y_axis( name => 'load' ); 
# Excel chart style
$chart->set_style( 10 ); 
$chart->set_size(width=>840, height=>576);
# -- Insert chart onto the worksheet
$worksheet->insert_chart( 'D2', $chart, 25, 10 );
 
#Close Excel writing
$workbook->close();
 
 
 
최종 내용은 아래와 같습니다.
 


 
 
 
이 외에도 엄청난( !) 양의 메소드와 파라메터들이 있습니다. 자세한 것은 perldoc을 통해 메뉴얼을 보세요
 
shape(도형)를 추가할 수도 있고, 각 셀의 서식을 정밀히 제어할 수도 있으며, 엑셀 함수식을 활용할 수 도 있습니다.
 
perldoc Excel::Writer::XLSX
 
 
참고로, 현재  해당 모듈은 기존 엑셀 문서를 열어서 추가/편집하는 것은 제약이 있습니다.
 
이러한 작업을 원한다면, 원본 엑셀을 열어서 내용을 담은 다음에, writing할 엑셀 파일을 열어서 수정/추가된 내용을 담는 방식으로 하시길 바랍니다.


[home-corpus007]:       http://corpus.egloos.com/
[twitter-corpus007]:    https://twitter.com/corpus007
