Title:    Perl 내부 구조 #3 : 배열 변수와 해시 변수
Package:  Seoul.pm
Category: perl
Category: Seoul.pm
Author:   luzluna


저자
-----

[@luzluna][twitter-luzluna] - C,Perl 엔지니어. 근래엔 Ops에 더 가까운 DevOps.
[PostgreSQL 성능 최적화][yes24-14061821]의 공동 역자, luzluna _at_ gmail.com


시작하며
--------

[첫 번째 기사][advent-2014-12-08]에서는 펄이 어떻게 스칼라 변수를 내부적으로 처리하는지를,
[두 번째 기사][advent-2014-12-09]에서는 펄의 기본타입인 스칼라변수가 어떻게 내부적으로
표현되는지 문맥에 따라 어떻게 변화되는지를 살펴보았습니다.
오늘은 펄의 또다른 기본 타입인 배열 변수와 해시 변수에 대해 살펴봅니다.


array
-----

일단 빈 array를 하나 만들고 살펴보겠습니다.

	use Devel::Peek;
         
	@array;
         
	Dump(\@array);

출력 결과를 살펴보도록 하겠습니다.

	SV = IV(0x7fd4308044a8) at 0x7fd4308044b8
	  REFCNT = 1
	  FLAGS = (TEMP,ROK)
	  RV = 0x7fd430829690
	  SV = PVAV(0x7fd430806398) at 0x7fd430829690
	    REFCNT = 2
	    FLAGS = ()
	    ARRAY = 0x0
	    FILL = -1
	    MAX = -1
	    ARYLEN = 0x0
	    FLAGS = (REAL)

@array라는 변수는 IV타입으로 생성되었고 FLAGS에는 ROK 그리고 RV에는
실제 PVAV타입의 어레이를 저장하는 곳을 가리키고 있는것을 확인할 수 있습니다.
ARRAY에는 0x0 그리고 MAX와 FILL에는 -1로 표시되어있습니다.
비어있다는 의미겠죠?

값을 넣어보도록 하겠습니다.

	use Devel::Peek;
         
	@array;
	Dump(\@array);
	push(@array, 1);
	Dump(\@array);

출력 결과를 확인해보겠습니다.

	# push 전
	SV = IV(0x7fc1620044a8) at 0x7fc1620044b8
	  REFCNT = 1
	  FLAGS = (TEMP,ROK)
	  RV = 0x7fc162029690
	  SV = PVAV(0x7fc162006398) at 0x7fc162029690
	    REFCNT = 2
	    FLAGS = ()
	    ARRAY = 0x0
	    FILL = -1
	    MAX = -1
	    ARYLEN = 0x0
	    FLAGS = (REAL)
	# push 후
	SV = IV(0x7fc162004658) at 0x7fc162004668
	  REFCNT = 1
	  FLAGS = (TEMP,ROK)
	  RV = 0x7fc162029690
	  SV = PVAV(0x7fc162006398) at 0x7fc162029690
	    REFCNT = 2
	    FLAGS = ()
	    ARRAY = 0x7fc161c0ae80
	    FILL = 0
	    MAX = 3
	    ARYLEN = 0x0
	    FLAGS = (REAL)
	    Elt No. 0
	    SV = IV(0x7fc1620044a8) at 0x7fc1620044b8
	      REFCNT = 1
	      FLAGS = (IOK,pIOK)
	      IV = 1

전과 후를 비교해보시면 FILL이 0이 되었고(-1부터 시작이니까 1개라는 의미) MAX는 3이라고 적혀있습니다.
아마도 최대 3개까지 저장할 수 있는 공간을 할당했다는 의미겠지요..
그리고 그 뒤에는 앞에서 살펴봤던 정수형 변수가 그대로 들어있는것을 보실 수 있습니다.
push, pop, unshift, shift 등의 array를 조작하는 함수들을 실행한 뒤
결과를 한번 살펴보시면... 그냥 예상대로 동작 하는것을 확인하실 수 있습니다.

hash
----

이번에는 Hash타입을 한번 살펴보겠습니다. 

먼저 코드부터..

	use Devel::Peek;
         
	%hash;
	Dump( \%hash );

출력 결과는 다음과 같습니다.

	SV = IV(0x7f9dea0044a8) at 0x7f9dea0044b8
	  REFCNT = 1
	  FLAGS = (TEMP,ROK)
	  RV = 0x7f9dea029690
	  SV = PVHV(0x7f9dea00a2a0) at 0x7f9dea029690
	    REFCNT = 2
	    FLAGS = (SHAREKEYS)
	    ARRAY = 0x0
	    KEYS = 0
	    FILL = 0
	    MAX = 7

array과 똑같이 IV타입에 저장하고 FLAGS도 ROK인것을 보실 수 있습니다.
RV값을 따라가면 PVHV타입이 저장되어 있습니다. HASH타입을 저장하는 변수겠죠?
특이사항은 array에는 없든 FLAGS에 SHAREKEYS가 있고 KEYS와 FILL이 -1이 아니라 0이네요.
비어있는데도 MAX가 7이라는 특이사항을 보실 수 있습니다.

	use Devel::Peek;
         
	%hash;
	$hash{"key1"} = 1;
	Dump( \%hash );

"key1"이라는 키에 정수값인 1을 넣어보았습니다.
출력 결과를 보겠습니다.

	SV = IV(0x7f8850804658) at 0x7f8850804668
	  REFCNT = 1
	  FLAGS = (TEMP,ROK)
	  RV = 0x7f8850829690
	  SV = PVHV(0x7f885080a2a0) at 0x7f8850829690
	    REFCNT = 2
	    FLAGS = (SHAREKEYS)
	    ARRAY = 0x7f885040ecc0  (0:7, 1:1)
	    hash quality = 100.0%
	    KEYS = 1
	    FILL = 1
	    MAX = 7
	    Elt "key1" HASH = 0x57529d96
	    SV = IV(0x7f88508044a8) at 0x7f88508044b8
	      REFCNT = 1
	      FLAGS = (IOK,pIOK)
	      IV = 1

array때와는 꽤 다르게 표시되는것을 보실 수 있습니다.
MAX가 7인것은 최대 7개까지 저장할 수 있는 버킷을 준비해두었다는 의미입니다.
Elt에 딸린 값이 arrary일때에는 No. 1,2,3 array index를 가리키던것이
키값인 "key1"과 해당 키의 해시값인 0x57529d96 인것을 보실 수 있습니다.

Tip) perl 5.16이전 버전에서는 HASH의 값이 변하지 않도록 되어있었지만
5.18이후 버전부터는 매번 실행마다 다르게 나오는 것을 확인하실 수 있습니다.
보안을 위해서 해시 값을 추측하지 못하도록 실행될 때 마다
hash의 값이 달라지도록하는 기능이 추가되어서 발생하는 현상입니다.

subroutine
-----------

이번에는 익명함수를 저장하는 변수가 어떻게 표현되는지 살펴보도록 하겠습니다.

	use Devel::Peek;
         
	$sub_a = sub { print "aa"; };
	Dump( $sub_a );

출력 결과를 보도록 하겠습니다.

	SV = IV(0x7fee4a029680) at 0x7fee4a029690
	  REFCNT = 1
	  FLAGS = (ROK)
	  RV = 0x7fee4a029738
	  SV = PVCV(0x7fee4a0280e8) at 0x7fee4a029738
	    REFCNT = 2
	    FLAGS = (PADMY,ANON,WEAKOUTSIDE,CVGV_RC)
	    COMP_STASH = 0x7fee4a004320	"main"
	    START = 0x7fee49c0e428 ===> 1
	    ROOT = 0x7fee49c0e370
	    GVGV::GV = 0x7fee4a0296c0	"main" :: "__ANON__"
	    FILE = "array.pl"
	    DEPTH = 0
	    FLAGS = 0x490
	    OUTSIDE_SEQ = 95
	    PADLIST = 0x7fee49c0db80
	    PADNAME = 0x7fee4a0296d8(0x7fee49c0e930) PAD = 0x7fee4a0296f0(0x7fee49c0c7d0)
	    OUTSIDE = 0x7fee4a004680 (MAIN)

IV타입아래에 FLAGS는 똑같이 ROK 그리고 RV를 따라가면 PVCV타입이 저장되어 있는것을 보실 수 있습니다.
PVCV가 Code Value 를 저장하는 형식입니다.
컴파일된 Op Code들의 Tree를 저장하게 됩니다.
아마도 이 구조 덕분에 first-class function이라든지 심볼테이블을
dynamic access하는 등 lisp에서만 사용가능한 테크닉들을 Perl에서도
사용할 수 있는게 아닌가 싶습니다.(정확히는 저도 잘 모릅니다만 ㅜ.ㅠ)
FLAGS를 보면 ANON 익명함수, WEAKOUTSIDE 약한 바인딩? 네임스페이스가
"main::__ANON__" 아래에 정의되어있다는게 눈에 띕니다.

정리하며
--------

지난 기사에 이어 기타 기타 다른 타입들을 어떻게 저장하는지를 간략히 살펴보았습니다.
앞에서 언급하지 못했던 기타 나머지들을 모아놓았더니
별 도움이 안되는 기사가 만들어진 것 같아서 죄송한 마음이 살짝 드네요.
벌써 대림 셋째주입니다, 기사를 읽으시러 오시는 모든 분들께 평화를 기원하겠습니다..


[advent-2014-12-08]:    http://advent.perl.kr/2014/2014-12-08.html
[advent-2014-12-09]:    http://advent.perl.kr/2014/2014-12-09.html
[twitter-luzluna]:      https://twitter.com/luzluna
[yes24-14061821]:       http://www.yes24.com/24/goods/14061821
