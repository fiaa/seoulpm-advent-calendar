Title:    use Expect;
Package:  Seoul.pm
Category: perl
Category: Seoul.pm
Author:   luzluna

저자
-----

[@luzlunz][twitter-luzlunz] - C,Perl 엔지니어. 근래엔 Ops에 더 가까운 DevOps.
[PostgreSQL 성능 최적화][yes24-14061821]의 공동 역자, luzluna _at_ gmail.com


시작하며
---------

원격지의 서버에서 루트권한을 얻어서 무언가 작업을 하려면 상당히 귀찮은 반복 노가다를 하게되곤 합니다. sudo가 세팅되어있는 서버라면 -S 옵션을 주고 간단히 처리할 수 있겠지만 보안 정책상 허락되어있지 않은 경우라면 곤란해지게 됩니다.
이런 경우 사용자의 입력을 그대로 대신해주는 Expect 모듈을 사용할 수 있습니다.

준비물
-------

필요한 모듈은 다음과 같습니다.

- [CPAN의 Expect 모듈][cpan-expect]

직접 [CPAN][cpan]을 이용해서 설치한다면 다음 명령을 이용해서 모듈을 설치합니다.

    #!bash
    $ sudo cpan Expect

사용자 계정으로 모듈을 설치하는 방법을 정확하게 알고 있거나
[perlbrew][home-perlbrew]를 이용해서 자신만의 Perl을 사용하고 있다면
다음 명령을 이용해서 모듈을 설치합니다.

    #!bash
    $ cpan Expect


사용 방법
----------

간단히 su를 입력하여 root비밀번호를 자동으로 입력하도록 하는 예제를 만들어보도록 하겠습니다.

    #!/usr/bin/env perl
    use strict;
    use warnings;
    use Expect;

    my $rootpass = "mypassword";
    my $exp = Expect->new;

    $exp->spawn("su");

    $exp->expect(10, 
        [ qr/Password:/ => sub { my $exp = shift; $exp->send($rootpass."\n"); exp_continue; } ],
        [ qr/root.*#/ => sub { my $exp = shift; $exp->interact(); } ],
    );


Expect Object를 만든 뒤 "su" 명령을 실행하고 Password: 가 나타나면 비밀번호를 입력하고 root 권한을 획득하면 사용자의 입력을 받는 간단한 스크립트입니다.

눈여겨볼 함수들은 다음과 같습니다.

 * spawn() : system() 혹은 qx|| 명령을 실행하는것과 비슷하지만 입출력을 Expect가 처리하도록 한다는 점이 다릅니다.
 * expect() : spawn으로 획득한 실행 결과의 출력에 따라 자동으로 반응하도록 명령을 등록합니다.
 * send() : spawn으로 획득한 실행 결과에 특정 문자열을 입력으로 넣어줍니다.
 * interact() : 이후부터는 사용자가 직접 입출력을 제어하도록 넘겨줍니다.

그럼 한번 실행해보겠습니다.

    [test@cent5 ~]$ ./expect.pl 
    Password: 
    [root@cent5 test]# IO::Stty not installed, cannot change mode at ./expect.pl line 12.
    IO::Stty not installed, cannot change mode at ./expect.pl line 12.

비밀번호를 획득한 뒤 root 프롬프트를 잘 획득한것을 볼 수 있읍니다만 이상한 경고문구가 나왔습니다. IO::Stty 를 설치하라고 하네요.


IO::Stty 설치
-------------

- [CPAN의 IO::Stty 모듈][cpan-io-stty]

    #!bash
    $ sudo cpan IO::Stty

혹은

    #!bash
    $ cpan IO::Stty

다시 실행해봅니다.

    [test@cent5 ~]$ ./expect.pl 
    Password: 
    [root@cent5 test]# 

경고메시지 없이 깔끔하게 잘 되네요.


원격 호스트 접속해보기
----------------------

로컬호스트에서 su 야.. 그냥 한번 치면 끝나는일이니까 구지 이런 모듈이 필요하지는 않겠죠. 하지만 세자리 숫자의 원격 호스트를 관리해야 한다면?

    #!/usr/bin/env perl
    use strict;
    use warnings;
    use Expect;

    my $userid = "bilbo";
    my $userpass = "userpass";
    my $rootpass = "rootpass";
    my $exp = Expect->new;

    $exp->spawn("ssh", "localhost");


    $exp->expect(10, 
        [ qr/password:/ => sub { my $exp = shift; $exp->send($userpass."\n"); exp_continue; } ],
        [ qr/$userid.*\$/ => sub { my $exp = shift; $exp->send("su\n"); exp_continue; } ],
        [ qr/Password:/ => sub { my $exp = shift; $exp->send($rootpass."\n"); exp_continue; } ],
        [ qr/root.*#/ => sub { my $exp = shift; $exp->interact(); } ],
    );

    print "$0 exit\n";


정리하며
---------

서비스를 운영하다보면 처한 상황에 따라 열악한 상황에서 많은 서버를 다뤄야할 경우도 가끔 발생하곤 합니다. 마음이야 우리도 vagrant로 스테이징하고 chef로 배포하고 싶지만 레가시라는게 그렇게 만만하진 않기 마련이죠. 이런때 간단한 Expect 모듈을 이용하면 난관을 쉽게 넘을 수 있는 경우도 있습니다.

더해보기
--------

위의 소스를 조금 변형하여 10대의 서버의 motd에 한둘 추가해넣는 코드를 작성해보세요.


_EOT_

[cpan-expect]: https://metacpan.org/module/Expect
[cpan-io-stty]: https://metacpan.org/module/IO::Stty

[twitter-luzluna]:              https://twitter.com/luzluna
[yes24-14061821]:                http://www.yes24.com/24/goods/14061821
