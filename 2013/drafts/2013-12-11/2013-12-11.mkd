Title:    유니코드를 활용한 정규표현식
Package:  Seoul.pm
Category: perl
Category: Seoul.pm
Category: unicode
Category: regex
Author:   newbcode

저자
-----

[@newbcode][twitter-newbcode] - 사랑스러운 딸 바보 도치파파.
[리눅스의 모든것][yes24-11040637] 공동저자.


시작하며
---------

[유니코드(Unicode)][wiki-unicode]는 전 세계의 모든 문자를 컴퓨터에서 일관되게 표현하고 다룰 수 있도록 설계된 문자 집합입니다.
`펄`이라는 한국어 문자는 10진수 `54148`에 일대일 대응됩니다.
*코드포인트(codepoint)*라고 하는 이 숫자는 보통 앞에 `U+`를 덧붙인 16진수 형태로 표기합니다.
`54148`을 16진수로 표현하면 `D384`이며 유니코드 표현으로는 `U+D384`라고 씁니다.

정규 표현식을 사용하다보면 *"한글과 영어를 분리하고 숫자와 문자등을 쉽게 파싱을 하는 방법은 없을까?"*하는 고민을 자주하게 됩니다.
펄의 내부 유니코드 속성에 대해 조금 깊게 들여다 보고 유니코드의 속성을 활용해
조금 더 정확하고 효율적으로 정규 표현식을 활용하는 방법에 대해 알아봅니다.


준비물
-------

필요한 모듈은 다음과 같습니다.

- [CPAN의 Data::Printer 모듈][cpan-data-printer]
- [CPAN의 Encode 모듈][cpan-encode]
- [CPAN의 HTTP::Tiny 모듈][cpan-http-tiny]

`Encode` 모듈은 코어 모듈이므로 별도로 설치할 필요는 없습니다.
`HTTP::Tiny`의 경우 펄 5.14 이후 버전(정확히는 v5.13.9)의 경우
코어 모듈로 지정되었으므로 역시 별도로 설치할 필요는 없습니다.
하지만 `HTTP::Tiny`는 지속적으로 버전이 갱신되고 있으므로 가능하면 최신 버전으로 설치하도록 합니다.
`Data::Printer` 모듈은 디버깅의 편의를 위해 필요한 모듈입니다.
`print`나 `say`로도 충분하지만 이런 도구를 잘 활용한다면 자료를 시각적으로
확인할 수 있기 때문에 문제가 생겼을때 빠른 시간에 문제를 해결할 수 있도록 도와줍니다.

직접 [CPAN][cpan]을 이용해서 설치한다면 다음 명령을 이용해서 모듈을 설치합니다.

    #!bash
    $ sudo cpan HTTP::Tiny Data::Printer

사용자 계정으로 모듈을 설치하는 방법을 정확하게 알고 있거나
[perlbrew][home-perlbrew]를 이용해서 자신만의 Perl을 사용하고 있다면
다음 명령을 이용해서 모듈을 설치합니다.

    #!bash
    $ cpan HTTP::Tiny Data::Printer


유니코드와 `length` 내장 함수
------------------------------

펄에서의 문자열은 *바이트 문자열*과 *유니코드 문자열* 두 가지 유형이 있습니다.
*유니코드 문자열*일 경우 *바이트 문자열*과 비교했을 때 바이트당 글자 길이가 다릅니다.
다음은 *바이트 문자열*을 사용한 예제입니다.

    #!perl
    #!/usr/bin/env perl

    #
    # FILE: unicode.pl
    #

    use strict;
    use warnings;

    my $x = '☺';
    printf "%s(%d)\n", $x, length($x);

실행하면 `length` 내장 함수는 유니코드가 아닌 경우 해당 문자열의 바이트 크기를 반환합니다.

    #!bash
    $ ./unicode.pl
    ☺(3)

다음은 *유니코드 문자열*을 사용한 예제입니다.

    #!perl
    #!/usr/bin/env perl

    use utf8;
    use strict;
    use warnings;
    use Encode qw( encode );

    my $x = '☺';
    printf "%s(%d)\n", encode( 'utf-8', $x ), length($x);

실행하면 `length` 내장 함수는 유니코드일 경우 해당 문자열의 길이, 즉 글자 수를 반환합니다.

    #!bash
    $ ./unicode.pl
    ☺(1)

유니코드 문자열을 사용하기 위해 `use utf8;` 선언해서 `utf8` 프라그마를 켜고 있으며
`Wide character ...` 경고를 방지하기 위해 출력 시점에 `Encode` 모듈을 이용해
명확하게 출력할 터미널의 문자셋에 맞게 인코딩(예제에서는 리눅스기 때문에 UTF-8로 인코딩)합니다.
`Wide character ...` 경고는 [2013년 펄 크리스마스 달력의 둘째 날 기사][advent-2013-12-02]를 참고하세요.


유니코드의 속성들
------------------
유니코드는 겉모양만 본다면 문자와 코드 사이의 대응관계(코드 포인트등)에 불과하다고 할 수도 있지만 유니코드 표준에는 사실 더 많은 내용이 숨어 있습니다.
 예를 들어 "이 문자는 소문자이다", "이문자는 오른쪽에서 왼쪽으로 써야 한다", "이 문자는 다른 문자와 함께 쓰기 위해 만들어진 기호이다"와 같은 각 문자의 속성도 정의 되어 있습니다.
perl은 이러한 유니코드의 속성을 활용 할 수 있게 설계되어 있습니다. 
그 구분자가 바로 이번 주제의 주인공인 *"\pP"* 이 분이십니다.

기본적인 속성은 아래와 같습니다.

- `\p{속성}` : 그 속성을 가지는 문자에 매치
- `\P{속성}` : 그 속성을 가지지 않는 문자에 매치
- `\p{L} or \p{Letter}` : 글자(letter)로 간주되는 모든 문자
- `\p{M} or \p{Mark}` : 그 문자만 쓸수는 없고 다른 기본 문자와 함께 써야만 하는 문자 (e.g. accents, umlauts, enclosing boxes, etc.).
- `\p{Z} or \p{Separator}` : 분리하는 역활을 할 뿐 화면에 표시할 수는 없는 문자(e.g. 공백문자등)
- `\p{S} or \p{Symbol}` : 딩뱃(Dingbat) 문자 및 기호(딩맷은 조판 시에 사용하는 장식용 문자 e.g. ■, ○, ♥, ☎ 등)
- `\p{N} or \p{Number}` : 숫자를 나타내는 문자
- `\p{P} or \p{Punctuation}` : 문장부호
- `\p{C} or \p{Other}`: 위에 있는 속성을 제외한 나머지 문자

그럼 위의 \p{L}속성을 이용해서 위에 예제를 다시 한번 테스트를 해봅니다.

    #!perl
    if ( $input =~ /\w+/ ) {      =>      if ( $input =~ /\p{L}/ ) {    수정합니다.

출력결과
    #!bash
    newbcode@newb-dt:~/perl_test$ ./unicode.pl 
    Matched perl

정확히 글자만 매칭되어 출력되는 것을 확인할 수 있습니다.


유니코드의 스크립트
--------------------
유니코드 스크립트란 특정 언어에만 적용되게 만든 문자(코드 포인트)의 그룹이라고 말 할수 있습니다.
시스템에 따라 \p{......}를 사용하여 이 스크립트에 속하는 문자를 찾을 수도 있습니다.
예를 들어 \p{Hangul}이라고 하면 "한글" 쓰기 체계에 속하는 문자에 매치됩니다.
한글, 영어, 그리스어를 분리하는 프로그램은 아래와 같습니다.


    #!perl
    #!/usr/bin/env perl
    
    use strict;
    use warnings;
    use Data::Printer;
    
    binmode STDIN, "encoding(utf8)";
    binmode STDOUT, "encoding(utf8)";
    
    chomp (my $input =(<STDIN>));
    
    if ( $input =~ /\p{hangul}/ ) {
    print "Korean Matched $input\n";
    }
    elsif ( $input =~ /\p{Latin}/ ) {
    print "English Matched $input\n";
    }
    elsif ( $input =~ /\p{Greek}/ ) {
    print "Greek Matched $input\n";
    }
    else {
    print "No Matched $input\n";
    }
    
출력(한글)

    #!bash
    newbcode@newb-dt:~/perl_test$ ./unicode.pl 
    당신을 사랑합니다
    Korean Matched 당신을 사랑합니다

출력(영어)

    newbcode@newb-dt:~/perl_test$ ./unicode.pl 
    i love you
    English Matched i love you

출력(그리스어)

newbcode@newb-dt:~/perl_test$ ./unicode.pl 
Σ 'αγαπώ
Greek Matched Σ 'αγαπώ


참고

binmode는 표준입력 파일핸들과 표준출력 파일핸들에다가 encoding tag를 추가합니다.
binmode는 표준입력으로 들어오는 것은 자동으로 decode하고, 표준 출력으로 나가는건 자동으로 encode를 진행합니다.


크리스마스 선물 #1: 사전에서의 언어구분
----------------------------------------
웹 문서에서 영어/일본어/한자등을 파싱 하고 싶을때는  \w를 쓰거나 약간 복잡한 /^[A-za-z]+$/ 등을 써야 합니다 .
하지만 \p형식의 속성을 이용해서 간단히 파싱 할 수 있습니다.

    #!perl
    if ( $input =~  /^[A-za-z]+$/ ) #일반 정규표현식
    if ( $input =~ /\p{Latin}/ ) #유니코드 정규표현식

네이버 사전에서 예를 들어 설명 합니다. 아래는 한글/영어/일본어/한자등을 추출합니다.

    #!perl
    #!/usr/bin/env perl
    
    use strict;
    use warnings;
    use Encode;
    use Data::Printer;
    use HTTP::Tiny;
    
    my $word = shift @ARGV;
    
    my $url = "http://dic.naver.com/search.nhn?dicQuery=$word&query=$word&target=dic&ie=utf8&query_utf=&isOnlyViewEE=";
    
    my $res = HTTP::Tiny->new->get($url);
    die "Failed!: $res->{status} - $res->{reason}\n" unless $res->{success};
    
    my $html = decode ( 'utf-8', $res->{content} );
    
    #한글만 가져오기
    my @korean = $html =~ m{\p{Hangul}+}gsm;
    print "@korean\n";
    #영어만 가져오기
    my @english = $html =~ m{\p{Latin}+}gsm;
    print "@english\n";
    #일본어만 가져오기
    my @japanese = $html =~ m{\p{Katakana}+}gsm;
    print "@japanese\n";
    #한자만 가져오기
    my @chinese = $html =~ m{\p{Han}+}gsm;
    print "@chinese\n";


이처럼 각 나라의 언어만을 모아서 2차가공이 쉽게 이루어 질 수 있습니다. 


크리스마스 선물 #2: 본문 중간에 있는 특수문자 변경
---------------------------------------------------

웹문서나 일반문서를 가지고 가공할 일이 있을때 종종 본문 중간에 특수문자가 있을경우 애를 먹곤 합니다. 
특수문자를 변경하거나 제거하는 기교를 살펴보겠습니다.
특수문자를 변경하는 예제

    #!perl
    #!/usr/bin/env perl
    
    use strict;
    use warnings;
    use Data::Printer;
    use utf8;
    
    chomp (my $input =(<DATA>));
    
    if ( $input =~ s/(\p{Symbol})/Love/ ) {
    print "$1\n";
    }
    print "$input\n";
    
    __DATA__
    I ♡ Perl.
    
    출력은 아래와 같습니다.
    
    newbcode@newb-dt:~/perl_test$ ./unicode.pl 
    Wide character in print at ./unicode.pl line 14, <DATA> line 1.
    ♡
    I Love Perl.

제거하는 부분은 정규표현식 비교에서 Love대신에 $input =~ s/(\p{Symbol})// 와같이 변경 합니다.

정리하며
---------
perl에서는 내부의 유니코드 구현이 utf8로 되어 있기 때문에 유니코드 매칭을 자유롭게 활용 할 수 있습니다.
유니코드 문자열을 사용하면 좀더 간단히 풍부한 정규표현식을 사용 할수 있습니다.


참고문서
---------

- [Unicode in Perl][unicode-in-perl] - [@aer0][twitter-aer0]
- [Perl과 한글][perl-and-hangul] - [@gypark][twitter-gypark]
- [perldoc perlunicode][perldoc-perlunicode]
- [perldoc perlunifaq][perldoc-perlunifaq]
- [perldoc utf8][perldoc-utf8]


[advent-2013-12-02]:      http://advent.perl.kr/2013/2013-12-02.html
[cpan-data-printer]:      http://metacpan.org/module/Data::Printer
[cpan-http-tiny]:         http://metacpan.org/module/HTTP::Tiny
[cpan]:                   http://www.cpan.org/
[home-perlbrew]:          http://perlbrew.pl/
[perl-and-hangul]:        http://gypark.pe.kr/wiki/Perl/%ED%95%9C%EA%B8%80
[perldoc-perlunicode]:    http://perldoc.perl.org/perlunicode.html
[perldoc-perlunifaq]:     http://perldoc.perl.org/perlunifaq.html
[perldoc-utf8]:           http://perldoc.perl.org/utf8.html
[twitter-aer0]:           https://twitter.com/aer0
[twitter-gypark]:         http://twitter.com/gypark
[twitter-newbcode]:       http://twitter.com/newbcode
[unicode-in-perl]:        https://github.com/aero/perl_docs/wiki/Unicode-in-Perl
[wiki-unicode]:           http://en.wikipedia.org/wiki/Unicode
[yes24-11040637]:         http://www.yes24.com/24/goods/11040637
