Title:    Qt 사용하기
Package:  Seoul.pm
Category: perl
Category: Seoul.pm
Category: Qt
Category: GUI
Author:   yukinpl

저자
-----

[@yukinpl][twitter-yukinpl] - 아는 것이 아무것도 없는 Perl 초보,
[eriny.net][home-yukinpl]을 운영하고 있다.


시작하며
---------

*Linux에서의 GUI / Perl 에서의 GUI*

Linux에서 GUI 툴킷하면 두 가지, [GTK+][home-gtk]와 [Qt][home-qt]가 떠오르시나요?
그러나 펄에서는 *Qt*가 유독 힘을 쓰지 못하는 것 같습니다.
[GUI를 표현하기 위한 펄 라이브러리][perl-begin-gui]로는 [wxPerl][home-wxperl],
[Tk][cpan-tk], [Perl/Qt와 Perl/KDE][perl-qt-kde], [gtk2-perl][home-gtk2-perl] 등이 있습니다.
그 중에서도 윈도우 사용자는 wxPerl을, Linux 사용자는 GTK+를 선호하는 것 같습니다.
대체 왜 그럴까요?
아무래도 Qt는 안정화 되어있다보니 모듈이 지속적으로 업데이트 되고 있지 않고
잘 알려진 모듈도 흔하지 않은 것이 가장 큰 이유인 것 같습니다.
더불어 라이센스 문제도 있겠지요(원인을 잘 아신다면 제게 알려주세요! :).
개인적으로는 Linux에서 C++ 프로그램 개발 시 GTK+보다 Qt로 더 많이 작업한 편이라
친근하기도 하고 펄에서 널리 사용되 못하는 것 같아 소개해보려 합니다.


준비물
-------

펄에서 Qt를 사용하려면 필요한 항목은 다음과 같습니다.

- Qt 4: 펄의 Qt 모듈은 Qt 4를 기준으로 작성되어 있습니다.
- SmokeQt: Scipting Meta Object Kcompiler의 약자로 KDE의 binding 모듈입니다.
- cmake: `Makefile.PL`이 `cmake`를 기반으로 동작합니다.

데비안 계열의 리눅스를 사용하고 있다면 다음 명령을 이용해서 개발 의존 패키지를 설치합니다.

    #!bash
    $ sudo apt-get install build-essentials cmake libqt4-dev

    ?
    $ sudo apt-get install libqt4-core libqt4-dbg libqt4-gui
    $ sudo apt-get install SmokeQt*

필요한 모듈은 다음과 같습니다.

- [CPAN의 Alien::SmokeQt 모듈][cpan-alien-smokeqt]
- [CPAN의 List::MoreUtils 모듈][cpan-list-moreutils]
- [CPAN의 Qt 모듈][cpan-qt]

직접 [CPAN][cpan]을 이용해서 설치한다면 다음 명령을 이용해서 모듈을 설치합니다.

    #!bash
    $ sudo cpan Qt

사용자 계정으로 모듈을 설치하는 방법을 정확하게 알고 있거나
[perlbrew][home-perlbrew]를 이용해서 자신만의 Perl을 사용하고 있다면
다음 명령을 이용해서 모듈을 설치합니다.

    #!bash
    $ cpan Qt


문제 해결
----------

### 설치 순서

모듈 설치가 실패하는 경우 다음 순서로 모듈을 하나씩 설치를 진행하도록 합니다.

- [CPAN의 List::MoreUtils 모듈][cpan-list-moreutils]
- [CPAN의 Alien::SmokeQt 모듈][cpan-alien-smokeqt]
- [CPAN의 Qt4 모듈][cpan-qt4]
- [CPAN의 Qt 모듈][cpan-qt]


### libperl.so 확인

[Qt 모듈][cpan-qt]을 설치하려면 사용하는 펄이 공유 라이브러리 형태로 빌드되어 있어야 합니다.
시스템에서 제공하는 대부분의 펄은 공유 라이브러리 형태로 빌드 되어 있습니다.
자신만의 펄을 사용하는 경우는 펄 빌드 옵션에서 `useshrplib` 항목을 확인 후
자신이 설치한 펄 디렉터리 내부에 `libperl.so` 파일이 있는지 확인해야 합니다.

    #!bash
    $ perl -V | grep useshrplib
        config_args='
            -de -Dprefix=/home/askdna/perl5/perlbrew/perls/perl-5.18.1-so
            -Dusethreads -Duseshrplib -Dcccdlflags=-fPIC
            -Aeval:scriptdir=/home/askdna/perl5/perlbrew/perls/perl-5.18.1-so/bin'
        libc=, so=so, useshrplib=true, libperl=libperl.so


### PERL5LIB 설정

빌드 후 테스트 진행시 [Qt4 모듈][cpan-qt4]과 [Qt 모듈][cpan-qt]의 문제로
스스로가 빌드한 모듈을 제대로 찾지 못하는 경우가 있습니다.
`blib/lib` 디렉터리와 `blib/arch` 디렉터리를 검색할 수 있도록 설정해주어야 하는데
가장 간단한 방법은 `PERL5LIB` 환경 변수를 설정하는 것입니다.

    #!bash
    $ export PERL5LIB=/path/to/blib/lib:/path/to/blib/arch:$PERL5LIB
    $ make test

테스트가 끝나면 `PERL5LIB` 환경 변수에서 추가한 두 항목을 제거하도록 합니다.


### `qstringlistmodel.t`와 `qabstractitemmodel.t` 테스트 실패

현재 [Qt4 모듈][cpan-qt4]과 [Qt 모듈][cpan-qt]의 문제로 인해 상속받은 가상 함수를 호출하는 테스트는 실패하는 경우가 있습니다.
따라서 다음 파일 목록을 확인하고 해당 테스트에서 실패할 경우 일단은 강제로 설치를 진행하도록 합니다.

    #!bash
    $ rgrep 'Qt::this()->SUPER::' Qt4-0.99.0 Qt-0.96.0
    Qt4-0.99.0/qtgui/t/qstringlistmodel.t:        return Qt::this()->SUPER::buddy($index);
    Qt4-0.99.0/qtgui/t/qstringlistmodel.t:        return Qt::this()->SUPER::flags($index);
    Qt4-0.99.0/qtcore/t/qabstractitemmodel.t:        return Qt::this()->SUPER::buddy($index);
    Qt4-0.99.0/qtcore/t/qabstractitemmodel.t:        return Qt::this()->SUPER::flags($index);
    Qt-0.96.0/qtgui/t/qstringlistmodel.t:        return Qt::this()->SUPER::buddy($index);
    Qt-0.96.0/qtgui/t/qstringlistmodel.t:        return Qt::this()->SUPER::flags($index);
    Qt-0.96.0/qtcore/t/qabstractitemmodel.t:        return Qt::this()->SUPER::buddy($index);
    Qt-0.96.0/qtcore/t/qabstractitemmodel.t:        return Qt::this()->SUPER::flags($index);


<p>
	<b>사용해보자</b><br />
	아래 예제를 실행해 보도록 하겠습니다.<br />
	<pre class="code">
#!/usr/bin/env perl
use warnings;
use strict;
use QtCore4;
use QtGui4;
use QtCore4::debug qw(ambiguous);

my $app= Qt::Application(\@ARGV);
my $button= Qt::PushButton('Hello, world!', undef);

$button->resize(200,30);
$button->show();

exit $app->exec();
</pre>
	위 예제 실행시 문제가 없다면 아래와 같이 실행됩니다.<br />
	<img src="http://np.3.eriny.net/eriny.net/files/2013/20131217/Screenshot from 2013-12-17 15:22:35.png"></img><br />
	여기까지 잘 진행되었다면 Qt를 사용하는 것에 무리가 없을 것입니다.<br />
	&nbsp;<br /></p>

<p>
	<b>SIGNAL / SLOT</b><br />
	Qt를 잘 사용하려면 자주 만나게 될 서브루틴이 있습니다.<br />
	바로 <code>Qt::Object::connect()</code> 입니다. 그리고 SIGNAL과 SLOT이라는 개념을 이해해야합니다. Event-driven programming을 잘 이해하고 계시다면 간단합니다. SIGNAL은 이벤트 발생 조건이고 SLOT은 이벤트 처리자라고 생각하시면 됩니다. 그리고 이것을 묶어주는 역활을 하는 서브루틴이 connect()입니다. 아래 예제는 버튼을 클릭하면 프로그램이 종료되는 간단한 예제입니다. 이 예제를 보면 쉽게 이해할 수 있으리라 예상됩니다.<br />
	<pre class="code">
#!/usr/bin/env perl
use warnings;
use strict;
use QtCore4;
use QtGui4;
use QtCore4::debug qw(ambiguous);

main();

sub main {
  my $app= Qt::Application(\@ARGV);
  my $btnQuit= Qt::PushButton("Quit");

  $btnQuit->resize(200, 30);
  Qt::Object::connect($btnQuit, SIGNAL "clicked()", $app, SLOT "quit()");

  $btnQuit->show();
  return $app->exec();
}
</pre>
	위 코드를 보면서 이해하셨겠지만 설명하자면 connect는 이벤트 발생 객체, 이벤트, 이벤트 처리 객체, 이벤트 처리자 순으로 입력하도록 되어 있습니다.<br />
	&nbsp;<br /></p>

<p>
	<b>화면 구성 1</b><br />
	지금까지의 예제는 컨트롤 하나(PushButton)만을 만들었는데 버젓한 화면을 구성하려면 어떻게 해야 할까요? 기본적으로 제공되는 컨트롤들은 parent 컨트롤를 설정할 수 있습니다. 아래 코드에 보시면 btnQt(PushButton)을 window(Widget)에 붙이는 것을 확인하실 수 있습니다.<br />
	<pre class="code">
#!/usr/bin/env perl
use warnings;
use strict;
use QtCore4;
use QtGui4;
use QtCore4::debug qw(ambiguous);

main();

sub main {
  my $app= Qt::Application(\@ARGV);
  my $window= Qt::Widget();

  $window->resize(200, 50);

  my $btnQuit= Qt::PushButton("Quit", $window);
  $btnQuit->setGeometry(10, 10, 180, 30);

  Qt::Object::connect($btnQuit, SIGNAL "clicked()", $app, SLOT "quit()");

  $btnQuit->show();
  return $app->exec();
}
</pre>
	&nbsp;<br /></p>

<p>
	<b>화면 구성2</b><br />
	여기까지 다다르고 나서 무언가 만들려고 하면 어떻게 해야할까? 를 고민하게 하는 문제가 있습니다. Widget에 컨트롤을 붙이기는 했는데 버튼을 눌렀을 때 기존 컨트롤들이 가지고 있는 동작이 아닌 다른 동작을 하려면 어떻게 해야할 까요? 아니면 Widget의 형태를 미리 만들어 둘 수는 없을까요? 이를 위해서는 서브 클래싱 방식을 이해해야합니다. 이는 생각보다 간단합니다.<br />
	<pre class="code">
use QtCore4::isa qw(Qt::Widget);</pre>
	위와 같이 <code>QtCore4::isa</code>를 통하여 서브 클래싱할 객체를 선택합니다. 그 후<br />
	<pre class="code">
sub NEW {
  shift->SUPER::NEW(@_);
}</pre>
	위와 같이 NEW를 재구현합니다. 일단은 이로써 기본은 끝입니다. 서브루틴 NEW를 수정하거나 다른 서브루틴을 추가하면 됩니다. 이때 유의해야하는 것은 기본적은 SIGNAL과 SLOT 이외에 추가하는 것은 아래와 같은 방법으로 명시해줘야합니다.<br />
	<pre class="code">
use QtCore4::slots viewMessage => [];</pre>
	&nbsp;<br />
	이를 이용하여 버튼을 눌렀을 때 'Hello World'를 보여주는 프로그램을 작성해 봅시다.<br />
	<pre class="code">
#!/usr/bin/env perl
use warnings;
use strict;

package ExWidget;
use QtCore4;
use QtGui4;
use QtCore4::debug qw(ambiguous);
use QtCore4::isa qw(Qt::Widget);
use QtCore4::slots viewMessage => [];

sub NEW {
  shift->SUPER::NEW(@_);
}

sub viewMessage {
  my $msgbox= Qt::MessageBox();
  $msgbox->setText("Hello World");
  return $msgbox->exec();
}

package main;
use QtCore4;
use QtGui4;
use QtCore4::debug qw(ambiguous);
use ExWidget;

main();

sub main {
  my $app= Qt::Application(\@ARGV);
  my $window= ExWidget();

  $window->resize(200, 50);

  my $btnQuit= Qt::PushButton("View", $window);
  $btnQuit->setGeometry(10, 10, 180, 30);

  Qt::Object::connect($btnQuit, SIGNAL "clicked()", $window, SLOT "viewMessage()");

  $window->show();
  return $app->exec();
}</pre>
	<img src="http://np.3.eriny.net/eriny.net/files/2013/20131217/Screenshot from 2013-12-18 16:57:20.png"></img><br />
	&nbsp;<br /></p>

<p>
	<b>글을 마무리하면서</b><br/>
	Qt에 대한 모든 내용을 다루기보다는 기본적인 설치와 사용방법에 중점을 두어 글을 작성했습니다. 글을 읽어보셨다면 아시겠지만(물론 이미 알고 계시겠지만) Qt가 그리 어려운 Framework는 아닙니다. 개인적으로는 perl에서 Qt도 많은 사랑을 받았으면 좋겠습니다. <br />
	&nbsp;<br />
	Enjoy your Perl~~~<br />
	&nbsp;<br /></p>


[cpan-alien-smokeqt]:           https://metacpan.org/module/Alien::SmokeQt
[cpan-list-moreutils]:          https://metacpan.org/module/List::MoreUtils
[cpan-qt4]:                      https://metacpan.org/module/Qt4
[cpan-qt]:                      https://metacpan.org/module/Qt
[cpan-tk]:                      https://metacpan.org/module/Tk
[home-gtk2-perl]:               http://gtk2-perl.sourceforge.net/
[home-gtk]:                     http://www.gtk.org/
[home-qt]:                      http://qt-project.org/
[home-wxperl]:                  http://www.wxperl.it/
[home-yukinpl]:                 http://eriny.net/
[perl-begin-gui]:               http://perl-begin.org/uses/GUI
[perl-qt-kde]:                  http://techbase.kde.org/Development/Languages/Perl
[twitter-yukinpl]:              http://twitter.com/#!/yukinpl
