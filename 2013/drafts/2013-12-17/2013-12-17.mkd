Title:    DBIx::Simple
Package:  Seoul.pm
Category: database
Category: perl
Category: Seoul.pm
Author:   luzluna


저자
-----

[@luzluna][twitter-luzluna] - luz + luna


시작하며
---------

간단히 DB를 사용할 수 있는 모듈인 DBIx::Simple을 소개합니다.


준비물
-------

데비안 계열의 리눅스를 사용하고 있다면 다음 명령을 이용해서 개발 의존 패키지를 설치합니다.

    #!bash
    $ sudo apt-get install libpq-dev

필요한 모듈은 다음과 같습니다.

- [CPAN의 DBIx::Simple 모듈][cpan-dbix-simple]
- [CPAN의 DBD::Pg 모듈][cpan-dbd-pg]
- [CPAN의 Mojolicious 모듈][cpan-mojolicious]

직접 [CPAN][cpan]을 이용해서 설치한다면 다음 명령을 이용해서 모듈을 설치합니다.

    #!bash
    $ sudo cpan DBIx::Simple DBD::Pg Mojolicious

사용자 계정으로 모듈을 설치하는 방법을 정확하게 알고 있거나
[perlbrew][home-perlbrew]를 이용해서 자신만의 Perl을 사용하고 있다면
다음 명령을 이용해서 모듈을 설치합니다.

    #!bash
    $ cpan Net::Pcap NetPacket Mojolicious


데이터베이스 접속 준비
-----------------------

PostgreSQL 데이터베이스를 기준으로 데이터베이스를 준비합니다.

데이터베이스에 접속하는 명령은 다음과 같습니다.

    #!plain
    $ psql -U postgres
    psql (9.3beta2)
    Type "help" for help.

사용자 `test`를 생성하고 비밀번호를 `test$$`로 설정하는 명령은 다음과 같습니다.

    #!plain
    postgres=# CREATE USER test WITH PASSWORD 'test$$';
    CREATE ROLE

`test` 데이터베이스 생성합니다.

    #!plain
    postgres=# CREATE DATABASE test;
    CREATE DATABASE

생성한 유저에게 접근 권한 부여합니다.

    #!plain
    postgres=# GRANT ALL PRIVILEGES ON DATABASE test to test;
    GRANT

완료되었습니다. 프로그램을 종료하려면 다음 명령을 입력합니다.

    #!plain
    postgres=# \q
    $


테이블 생성
------------

테이블을 생성하기 위해 `test` 계정으로 `test` 데이터베이스에 접속합니다.

    #!plain
    $ psql -U test test
    psql (9.3beta2)
    Type "help" for help.

*postgres 9.3이후 디폴트로 포함된 데이터타입인 JSON 타입*으로 데이터 필드를 선언해보았습니다.
내부적으로 `TEXT` 타입과 같지만 타입 체크 및 요소별 접근이 가능하고
특정 요소에 인덱스를 걸 수 있어서 *NOSQL처럼 사용할 수 있다는 장점*이 있습니다.

    #!plain
    test=> CREATE TABLE item ( id SERIAL PRIMARY KEY, data JSON );
    CREATE TABLE

샘플 자료를 추가해보죠.

    #!plain
    test=> INSERT INTO item (data) VALUES ('{"name":"test1", "value":31}');
    INSERT 0 1


웹 응용을 위한 설정 파일 생성
------------------------------

*Mojolicious*는 기본적으로 설정 파일을 지원합니다.
`Mojolicious::Lite`를 이용해서 웹 응용을 제작할 경우 웹 응용과
동일한 파일명에 확장자를 `.conf`로 설정하면 자동으로 읽어들입니다.
파일을 준비해보죠.


    #!bash
    $ mkdir dbix-simple-example
    $ cd dbix-simple-example
    $ touch item.conf
    $ touch item.pl

`item.conf` 파일을 다음처럼 작성합니다.

    #!perl
    {
        db => [
            'dbi:Pg:dbname=test;host=127.0.0.1;port=5432',
            'test',
            'test$$',
        ]
    }


Mojolicious::Lite 어플리케이션
-------------------------------

`item.pl` 파일을 다음처럼 작성합니다.

    #!perl
    #!/usr/bin/env perl

    use Mojolicious::Lite;

    use DBD::Pg;
    use DBI;
    use DBIx::Simple;
    use JSON;

    my $config = plugin Config;

    my $dbh = DBIx::Simple->connect( @{$config->{db}} );
    helper db => sub { $dbh };

    get '/item/list' => sub {
        my $self = shift;

        my $items = $self->db->query("SELECT * FROM item")->hashes;
        for my $item (@$items) {
            $item->{data} = JSON::decode_json( $item->{data} );
        }

        $self->render( json => $items );
    };

    app;


실행
-----

실행하는 명령은 다음과 같습니다.

    #!bash
    $ morbo -l http://*:5000 item.pl
    [Mon Dec  9 18:15:17 2013] [debug] Reading config file "/home/user/dev/dbix_simple/config.conf".
    [Mon Dec  9 18:15:17 2013] [info] Listening at "http://*:5000".
    Server available at http://127.0.0.1:5000.

`-l http://*:5000` 옵션을 이용해 `5000`번 포트로 실행했으므로
웹 브라우저로 접속할 때도 `http://localhost:5000` 주소로 접속해야 합니다.
웹 브라우저로 `http://localhost:5000/item/list` 주소로 접속해보세요.

    #!plain
    [{"id":1,"data":{"value":31,"name":"test1"}}]

예쁘게 잘 나옵니다. :)


CREATE 핸들러 추가
-------------------

`item.pl` 웹 응용 코드의 `app;` 바로 위에 다음 코드를 추가합니다.

    #!perl
    get  '/item/create' => 'item/create';
    post '/item/create' => sub {
        my $self = shift;

        $self->db->query(
            "INSERT INTO item (data) VALUES (?)",
            $self->param('data'),
        );

        $self->render(json => {"status"=>"done"});
    };

그리고 `item.pl`의 `app;` 바로 다음에 다음 코드를 추가합니다.

    #!perl
    __DATA__

    @@ item/create.html.ep
    <form action="/item/create" method="post">
      <input name="data" type="text">
      <input type="submit">
    </form>

`morbo`는 변경한 소스를 자동으로 감지해서 새로 서버를 기동시키므로
별도로 종료 후 다시 기동할 필요는 없습니다.
이제 웹브라우저를 이용해서 `http://localhost:5000/item/create` 주소로 접속해보면
아이템을 추가하기 위한 간단한 양식을 볼 수 있습니다.
양식에 JSON 형식을 입력하면 다음과 같은 결과를 확인할 수 있습니다.

    #!plain
    #
    # 입력
    #
    {"babo":"eee"}

    #
    # 결과
    #
    {"status":"done"}

유효하지 않은 JSON 형식을 입력할 경우의 PostgreSQL에서 발생하는 오류를 확인할 수 있습니다.

    #!plain
    #
    # 입력
    #
    bad json format

    #
    # 결과
    #
    DBD::Pg::st execute failed: ERROR:  invalid input syntax for type json


#커멘드라인에서 사용하기

웹페이지를 통하지 않고 일반 커멘드라인 유틸리티에서도 간단히 사용하실 수 있습니다.

```
use strict;
use warnings;
use DBIx::Simple;
use File::Slurp;
use Data::Dump qw/dump/;

my $config = eval( read_file('config.conf') );

my $dbh = DBIx::Simple->connect( @{$config->{db}} );

my $ret= $dbh->query("SELECT * FROM item")->hashes;

print dump($ret), "\n";
```

실행해보면

```
$ perl dbis.pl
[
  { data => "{\"name\":\"test1\", \"value\":31}", id => 1 },
  { data => "{\"babo\":\"eee\"}", id => 2 },
]
```

#결론
Mojolicious나 Dancer같은 경량 웹프레임워크들을 사용할때에 DBIC(DBIx::Class)를 사용하는것인 조금 무겁고 복잡하게 느껴질때가 있습니다.
그렇다고 그냥 DBI인터페이스를 통해서 날쿼리를 쓰는건 불편합니다. 이런때에 간단히 DBIx::Simple을 이용해보시는건 어떨까요?

#과제
웹페이지를 만드는 용도로 사용중한다면 DBIx::XHTML_Table 모듈을 이용해서 테이블로 그려 볼수도 있고, 커멘드라인에서 사용한다면 Text::Table을 사용하여 조금 더 예쁘게 출력해볼 수도 있습니다. 한번 시도해보세요.


[cpan-dbd-pg]:              https://metacpan.org/module/DBD::Pg
[cpan-dbix-simple]:         https://metacpan.org/module/DBIx::Simple
[cpan-mojolicious]:         https://metacpan.org/module/Mojolicious
[cpan]:                     http://www.cpan.org/
[home-mojolicious]:         http://mojolicio.us/
[home-perlbrew]:            http://perlbrew.pl/
[twitter-luzluna]:          http://twitter.com/#!/luzluna
