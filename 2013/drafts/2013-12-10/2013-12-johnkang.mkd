Title:    펄에서 외부명령어 실행 시키기
Package:  Seoul.pm
Category: perl
Category: Seoul.pm
Author:   John Kang


시작하며
_________

펄에서 외부명령어를 실행 시킬수 있는 방법에는 몇가지가 있습니다.

[system('command')][perldoc-system] 함수를 사용하거나, [`command`][perlop-string] 와 같이 빽틱을 사용하는 방법
또 [open()][perldoc-open] 함수를 이용하여 생성한 pipe를 통해 다른 프로세스와 데이터를 주고 받을 수도 있습니다.

이러한 방법들의 동작과 차이점을 살펴보고 마지막에는 [Capture::Tiny][cpan-capture-tiny] 모듈을 이용하여
외부명령어를 실행 시키는 것에 대해 살펴 보고자 합니다.

외부 명령어를 펄을 통해 실행 시킬때는 표준출력과 표준에러의 방향(fd) 그리고 해당 외부프로그램이
반환하는 종료값등을 잘 인지 하고 사용할때 좀 활용도와 그 유연성이 높아집니다.

왜 간단하게 위의 방법들을 이용하여 실행하지 않고 복잡하게 모듈까지 설치 해가면서
외부 명령어를 실행 하는지에 대한 의문은 각각의 차이점을 먼저 비교해보고 설명하겠습니다.


system() 함수
______________

system 함수는 perl의 코어 함수로써 외부명령어를 실행 시킬 수 있습니다.

`사용방법`
    system LIST
    system PROGRAM LIST

    #!perl
    my $exit_status = system('ls');
    - return : $exit_status, $?
    - stdout : STDOUT
    - stderr : STDERR
 
system() 함수의 리턴은 외부명령어가 반환한 종료 값입니다.
따라서 $exit_status 는 ls 명령어의 종료값을 담게 됩니다.
성공적으로 명령어가 종료 됬다면, 0값이 담기게 됩니다.

system() 함수는 fork를 통해서 자식 프로세스를 생성하고 자식프로세스에서 외부 명령어를 실행합니다.
init --> perl --> ls
이때 사용자가 임의로 표준출력과 표준에러의 파일핸들을 수정하지 않았다면,
ls 명령어의 표준출력은 펄의 STDOUT(1)으로, 에러는 펄의 STDERR(2)로 보내집니다.

fileno 함수를 이용하면 해당 파일 핸들의 fd 값을 알수 있습니다.

    #!perl
    print fileno STDOUT ## 1

빽틱 (``)
__________

빽틱으로 외부명령어를 실행하는 방법은 쉘프로그래밍에서의 방법과 똑같습니다!

펄에서는 크게 스칼라와 리스트, 이렇게 2가지 문맥(context)이 존재하며

영어에서의 단수와 복수를 차이와 비슷합니다.


`스칼라문맥에서의 빽틱 (``)`

    #!perl
    my $output_string = `ls`;
    - return : $?
    - stdout : $out_string
    - stderr : STDERR

부명령어의 종료값은 $? 에 저장되며, 빽틱(``)은 외부명령어의 표준출력을 리턴하기 때문에
위의 경우는 디렉토리와 파일의 리스트가 $output_string 변수에 저장되어집니다.

표준에러는 펄의 STDERR으로 향하며, 만약 변수에 에러도 담고 싶다면
외부명령어의 표준에러의 방향을 변경해주어야 합니다.

    #!perl
    my $output_string = `ls 2 > &1`;

`리스트 문맥에서의 빽틱(`` `` ``)`

    #!perl
    my @output_string = `ls`;
    - return : $?
    - stdout : @out_string line terminated by $/;
    - stderr : STDERR


왜 리스트 문맥이냐고요?
빽틱의 결과를 배열(복수)이 원하고 있습니다.

리스트 문맥에서 빽틱(``)은 $/(default : \n) 변수에 값을 구분자로 하여 리스트를 리턴합니다.
따라서 @output_string은 \n(개행) 으로 구분된 리스트를 가집니다.

    #!perl
    my $output_string = qx(ls);


qx() 의 사용은 ``빽틱과 같습니다.
 
만약 실행 구문에 쉘이 해석해야 할 meta문자가 있다면 아래와 같이 싱글쿼터를 구획문자로 사용하세요.

    #!perl
    my $output_string = qx'ps $$';


open() 함수를 이용하여 pipe 열기
_________________________________

pipe를 이용하여 외부 명령어와 데이터를 주고받을수 있습니다.

open 함수로 pipe를 열때 두번째 인자를 검사합니다.

두번째 인자의

앞부분에 | 기호가 오면 쓰기 모드로 pipe를 생성하며

뒷부분에 | 기호가 오면 읽기 모드로 pipe를 생성합니다.

현재 디렉토리에서 30일이 지난 파일(.log)을 삭제 하는 간단한 프로그램을 만들어 보겠습니다.

    #!perl
    open( my $pipe, 'ls |' ) or die "Can't open a pipe : $!\n";
    while (<$pipe>) {
        chomp;                    ## 파일명뒤의 개행(\n) 삭제
        next unless -f;           ## 파일만 추출
        next unless /\.log$/i;    ## *.log 파일만 추출
        unlink if -M > 30;        ## -M 으로 파일변경시간 확인(in day)후 삭제
    }
    
open 함수의 에러 발생시 $! 변수를 통하여 에러 확인을 할 수 있습니다.


/bin/mail 을 통해 간단한 메일 보내기

    #!perl
    use autodie;
    open( my $body, '| /bin/mail -s Subject mail@domail.com' );
    print {$body} 'Hi There, I hope you are doing well :)';


autodie 프라그마를 통해 open 함수의 에러 핸들링을 자동화 했습니다.
 
$body 라는 파이프를 통해 입력 결과를 /bin/mail 에게 전달하였습니다.


Capture::Tiny
______________

위의 방법만으로도 충분히 외부 명령어를 실행 시키는데 큰 무리는 없습니다.

허나 어떤 외부명령어는 실행중 표준출력과 표준에러가 동시에 발생하기도 합니다.

위의 방법으로는 표준출력과 에러를 다른 변수에 각각 저장하기에는 프로그래머의 많은 코딩을 요구 합니다.
(사실 어떤 노력이 필요 한지 모릅니다;;)

펄에는 CPAN 이 있습니다!!

JEEN_LEE 님께서 작성해주신 셋째날의 기사를 참고해보면 Capture::Tiny는 [43위에 랭크][cpan-leaderboard] 되어있고, 아래와 같은 이점이 있습니다.

- Perl, XS 코드 또는 외부명령어에서 반환하는 표준출력과 표준에러를 Capture 하는 portable한 방법을 제공.
- tee라는 함수를 사용하여 표준출력, 표준에러를 변수에 담는것은 물론 동시에 원래의 STDOUT, STDERR로 출력.

    #!perl
    use autodie;
    use Capture::Tiny ':all';

    my @cmd = qw( find /proc -type f );
    my ($stdout, $stderr, $exit) = capture {
        system @cmd;
    };

 system() 함수의 결과를 통해 capture함수가 표준출력, 표준에러 그리고 외부명령어의 종료값을 반환합니다.

 그리고 우리는 표준출력과 에러를 구분해서 사용할 수 있습니다.

    #!perl
    my $out_fh = IO::File->new("out.log", "w+");
    my $err_fh = IO::File->new("err.log", "w+");

    my @cmd = qw( find /proc -type f );
    capture { system @cmd } stdout => $out_fh, stderr => $err_fh;

위와 같이 capture 함수에 옵션을 제공함으로써 stdout과 stderr를 파일에 쓸수 있습니다.
 
어떤 명령어는 실행 도중에 변수에도 저장하고 기존의 표준출력과 에러의 출력방향은 모니터를 통해
실시간으로 확인하고 싶을 수도 있습니다.

    #!perl
    my @cmd = qw( find /proc -type f );
    my ($stdout, $stderr, @result) = tee {
        system @cmd;
    };

위의 tee 함수가 그러한 역활을 하고 있습니다. 각각의 출려과 에러를 $stdout, $stderr에 저장하며
 기존의 출력방향으로 그 내용을 출력해 줍니다.
 
위의 언급한 두가자의 특징을 [Capture::Tiny][cpan-capture-tiny]를 통해 좀 더 디테일하게(표준 출력 혹은 에러만 핸들링) 사용 하실수 있습니다.
 

그밖의 주의 사항!
__________________

`보안`
 system 함수에 인자를 전달할때는 위와 같이 배열로 명령어와 각각의 인자를 배열에 담아
실행하는것이 좋습니다.

    #!perl
    #!/usr/bin/env perl

    use strict;
    use warnings;

    my $cmd = 'find / -name' . q{ };
    print "Please input what file do you want to find : ";
    chomp( my $input = <> );

    my $exit_status = system( $cmd . $input );
    
만약 사용자 입력이 `';rm -rf'` 라면

find / -name ;`rm -rf` 가 어떤 상황을 만들어 낼까요?

배열로 argument를 구성하게 되면 각 배열의 요소들을 문자열로 간주하게 되어집니다.

때문에 배열 마지막 요소에 ';rm -rf'가 들어간다면 ';rm -rf' 라는 이름의 파일을 찾으려 합니다.


`Windows 환경에서의 반환값`

리눅스, 유닉스 계열에 익숙한 관리자라면 윈도우에서 외부 명령어를 실행하고 그 반환값을 확인하고 당황 하실 수 도 있습니다.
반환값의 크기가 2Byte이기 때문입니다.(유닉스에서는 1Byte로 제한)

hhhhhhhhllllllll 하위 7비트는 프로그램을 종료한 signal 이 담겨져 있으며, 상위 8비트는 설제 프로그램의 종료 값입니다.

실제 종료 값을 얻기 위해서는 8bit 만큼 우측으로 shift를 하여 그 값을 얻을 수 있습니다.

    #!perl
    my @cmd = 'dir asdf'    # asdf is not existing
    my $ret = system @cmd;  # $ret = 512
    $ret >>= 8;             # $ret = $ret >> 8;
    print "$! : [$ret]";    # No such file or directory : [2]


`SunOS, Solaris, HP-UX 에서의 열려져 있는 파일 핸들과 system()함수`

위에서 언급한바와 같이 위의 외부 명령어를 실행시키기 위해서는

외부 명령어를 위한 자식프로세스를 생성(fork)한다고 했습니다.

fork로 생성된 자식프로세스는 부모의 FD는 물론 아직 소모되지 Output 버퍼도

물려 받게 됩니다.

안전하게 system함수를 사용하기 위해서는 Output 버퍼를 flush 해주고 사용하여야 합니다.

Linux 계열과 Windows 계열에서의 system 함수는 이를 알아서 처리 하므로 고려대상이 아니며

SunOS, Solaris, HP-UX의 O/S 에서는 이를 고려 하여야 합니다.

    #!perl
    local $| = 1;    ## autoflushing
    .
    .
    coding...
    .
    my $ret = system ('command');
    .


위의 방법으로 처리 할수 있습니다.


정리하며
_________

전반적으로 펄을 이용하여 외부 명령어를 실행하는 방법을 알아보았으며,

더불어 Capture::Tiny 모듈을 이용하여 STDOUT과 STDERR를 좀 더 자유롭게 다룰수 있었습니다.

아마 이런 모듈이 없었다면 이런 기능을 직접 구현하기 보다는 STDOUT에서 적절히 타협을 보았을것 같습니다.

다시한번 [CPAN][cpan]이라는 저장소에 놀라며 모듈 개발자에게 감사를 표합니다 :)

_EOT_

[cpan]:                 https://metacpan.org
[cpan-capture-tiny]:    https://metacpan.org/pod/Capture::Tiny
[cpan-leaderboard]:     https://metacpan.org/favorite/leaderboard
[perldoc-open]:         http://perldoc.perl.org/functions/open.html
[perldoc-system]:       http://perldoc.perl.org/functions/system.html
[perlop-string]:        http://perldoc.perl.org/perlop.html#%60STRING%60
